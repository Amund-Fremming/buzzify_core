// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250604063225_Copy")]
    partial class Copy
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Beer")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Abstractions.UserBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("User", "Beer");

                    b.HasDiscriminator().HasValue("UserBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.Ask.AskGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentIteration")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsOriginal")
                        .HasColumnType("boolean");

                    b.Property<int>("Iterations")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("UniversalId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id", "IsOriginal");

                    b.ToTable("AskGame", "Beer");
                });

            modelBuilder.Entity("Domain.Entities.Ask.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("AskGameId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AskGameId");

                    b.ToTable("Question", "Beer");
                });

            modelBuilder.Entity("Domain.Entities.Spin.Challenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("Participants")
                        .HasColumnType("integer");

                    b.Property<bool>("ReadBeforeSpin")
                        .HasColumnType("boolean");

                    b.Property<int?>("SpinGameId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SpinGameId");

                    b.ToTable("Challenge", "Beer");
                });

            modelBuilder.Entity("Domain.Entities.Spin.SpinGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentIteration")
                        .HasColumnType("integer");

                    b.Property<int>("HostId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsOriginal")
                        .HasColumnType("boolean");

                    b.Property<int>("Iterations")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("UniversalId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HostId");

                    b.HasIndex("Id", "IsOriginal");

                    b.ToTable("SpinGame", "Beer");
                });

            modelBuilder.Entity("Domain.Entities.Spin.SpinPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("TimesChosen")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId", "GameId")
                        .IsUnique();

                    b.ToTable("SpinPlayer", "Beer");
                });

            modelBuilder.Entity("Domain.Entities.Shared.GuestUser", b =>
                {
                    b.HasBaseType("Domain.Abstractions.UserBase");

                    b.HasDiscriminator().HasValue("GuestUser");
                });

            modelBuilder.Entity("Domain.Entities.Shared.RegisteredUser", b =>
                {
                    b.HasBaseType("Domain.Abstractions.UserBase");

                    b.Property<string>("Auth0Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("RegisteredUser");
                });

            modelBuilder.Entity("Domain.Entities.Ask.Question", b =>
                {
                    b.HasOne("Domain.Entities.Ask.AskGame", null)
                        .WithMany("Questions")
                        .HasForeignKey("AskGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Spin.Challenge", b =>
                {
                    b.HasOne("Domain.Entities.Spin.SpinGame", null)
                        .WithMany("Challenges")
                        .HasForeignKey("SpinGameId");
                });

            modelBuilder.Entity("Domain.Entities.Spin.SpinGame", b =>
                {
                    b.HasOne("Domain.Abstractions.UserBase", "Host")
                        .WithMany()
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Host");
                });

            modelBuilder.Entity("Domain.Entities.Spin.SpinPlayer", b =>
                {
                    b.HasOne("Domain.Entities.Spin.SpinGame", "SpinGame")
                        .WithMany("Players")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Abstractions.UserBase", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpinGame");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Ask.AskGame", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Domain.Entities.Spin.SpinGame", b =>
                {
                    b.Navigation("Challenges");

                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
